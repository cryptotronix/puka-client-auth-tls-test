#!/bin/bash

all=0
init=0
csr=
name=

# print the usage of this script
print_usage() {
  printf "Usage: gen-credentials.sh [OPTION]\n"
  printf "Generate a set of credentials auto-magically, or specify stages and sources for specific use.\n\n"
  printf "  %s\t\tautomatically generate a root CA, intermediate CA, server cert, and client cert (default if no flags provided)\n\n" '-a'
  printf "  %s\t\tgenerate only the initial root CA and the intermediate CA\n\n" '-i'
  printf "  %s\t\tspecify a CSR file for the intermediate CA to sign\n\n" '-r'
  printf "  %s\t\tspecify a name for the resulting cert generated by providing the -r flag\n\n" '-n'
}

init() {
	mkdir -p certs crl newcerts private
	touch index.txt
	echo 1000 > serial

	# generating root CA
	echo "generating root ca..."
	openssl ecparam \
		-name prime256v1 \
		-genkey \
		-noout \
		-out private/root.key.pem
	openssl req \
		-config ../configs/root.conf \
		-key private/root.key.pem \
		-new \
		-nodes \
		-x509 \
		-days 365 \
		-sha256 \
		-extensions v3_ca \
	      	-out certs/root-ca.crt.pem \
		-subj "/C=AU/ST=Some-State/O=Internet Widgets Pty Ltd/CN=Puca Training Root CA"

	# generating intermediate CA
	mkdir -p intermediate
	cd intermediate
	mkdir -p certs crl newcerts private csr
	touch index.txt
	echo 1000 > serial
	echo 1000 > crlnumber
	echo "generating intermediate TLS ca..."
	cd ..
	openssl ecparam \
		-name prime256v1 \
		-genkey \
		-noout \
		-out intermediate/private/intermediate.key.pem
	openssl req \
		-config ../configs/intermediate.conf \
		-new \
		-sha256 \
		-key intermediate/private/intermediate.key.pem \
		-out intermediate/csr/intermediate.csr.pem \
		-subj "/C=AU/ST=Some-State/O=Internet Widgets Pty Ltd/CN=Puca Training TLS CA"
	openssl ca \
		-config ../configs/root.conf \
		-extensions v3_intermediate_ca \
		-days 365 \
		-batch \
		-notext \
		-md sha256 \
		-in intermediate/csr/intermediate.csr.pem \
		-out intermediate/certs/intermediate-ca.crt.pem
	# make root ca + key file
	cat certs/root-ca.crt.pem \
	      private/root.key.pem > ../puca-root-ca.crt.key.pem

	# make tls ca + key file
	cat intermediate/certs/intermediate-ca.crt.pem \
	      intermediate/private/intermediate.key.pem > ../puca-tls-ca.crt.key.pem

	# make ca chain file
	cat intermediate/certs/intermediate-ca.crt.pem \
	      certs/root-ca.crt.pem > ../puca-ca-chain.crt.pem
}

certs() {
	if [ -f ../puca-tls-ca.crt.key.pem ]; then
		mkdir -p intermediate
		cd intermediate
		mkdir -p certs crl newcerts private csr
		touch index.txt
		echo 1000 > serial
		echo 1000 > crlnumber
		cd ..
		cp ../puca-tls-ca.crt.key.pem intermediate/certs/intermediate-ca.crt.pem
		cp ../puca-tls-ca.crt.key.pem intermediate/private/intermediate.key.pem
	else
		init
	fi

	if [ ! -z "$csr" ] && [ $all -eq 0 ]; then
		if [ -z "$name" ]; then
			echo "using default cert name default.crt.pem..."
		fi
		echo "generating cert..."

		openssl ca \
			-config ../configs/intermediate.conf \
			-extensions server_cert \
			-days 365 \
			-batch \
			-notext \
			-md sha256 \
			-in $csr \
			-out intermediate/certs/default.crt.pem
		cp intermediate/certs/default.crt.pem ../default.crt.pem
	else
		# generating server cert
		echo "generating server cert..."
		openssl ecparam \
			-name prime256v1 \
			-genkey \
			-noout \
			-out intermediate/private/server.key.pem
		openssl req \
			-config ../configs/intermediate.conf \
			-new \
			-sha256 \
			-key intermediate/private/server.key.pem \
			-out intermediate/csr/server.csr.pem \
			-subj "/C=AU/ST=Some-State/O=Internet Widgets Pty Ltd/CN=Puca Training Server"
		openssl ca \
			-config ../configs/intermediate.conf \
			-extensions server_cert \
			-days 365 \
			-batch \
			-notext \
			-md sha256 \
			-in intermediate/csr/server.csr.pem \
			-out intermediate/certs/server.crt.pem

		# generating client cert
		echo "generating client cert..."
		openssl ecparam \
			-name prime256v1 \
			-genkey \
			-noout \
			-out intermediate/private/client.key.pem
		openssl req \
			-config ../configs/intermediate.conf \
			-new \
			-sha256 \
			-key intermediate/private/client.key.pem \
			-out intermediate/csr/client.csr.pem \
			-subj "/C=AU/ST=Some-State/O=Internet Widgets Pty Ltd/CN=Puca Training Client"
		#openssl req \
		#	-new \
		#	-sha256 \
		#	-engine see_engine \
		#	-keyform ENGINE \
		#	-key 1 \
		#	-out intermediate/csr/client.csr.pem \
		#	-subj "/C=AU/ST=Some-State/O=Internet Widgets Pty Ltd/CN=Puca Training Client"
		openssl ca \
			-config ../configs/intermediate.conf \
			-extensions usr_cert \
			-days 365 \
			-batch \
			-notext \
			-md sha256 \
			-in intermediate/csr/client.csr.pem \
			-out intermediate/certs/client.crt.pem

		# make server cert + key file
		cat intermediate/certs/server.crt.pem \
		      intermediate/private/server.key.pem > ../puca-server.crt.key.pem

		# make client cert + key file
		cat intermediate/certs/client.crt.pem \
		      intermediate/private/client.key.pem > ../puca-client.crt.key.pem
	fi
}


# Parsing option flags
while getopts 'air:n:' flag; do
  case "${flag}" in
    a) all=1 ;;
    i) init=1 ;;
    r) csr="${OPTARG}" ;;
    n) name="${OPTARG}" ;;
    h) print_usage
       exit 0 ;;
    *) print_usage
       exit 1 ;;
  esac
done
# input handling
if [ $all -eq 0 ] && [ $init -eq 0 ] && [ -z "$csr" ] && [ -z "$name" ]; then
	all=1
fi

if [ ! -z "$name" ] && [ -z "$csr" ]; then
	echo "error! -n requires that -r is also specified "
	exit 1
fi


# making a directory to keep our mess contained
cd ./puca-certs
mkdir -p temp-work

# exit and delete dir if any command fails
trap 'echo "removing artifacts..."; cd ..; rm -rf temp-work; echo "done."; exit 1' ERR

cd temp-work
export PUCA_CWD=`pwd`


if [ $all -eq 1 ]; then
	init
	certs
elif [ $init -eq 1 ]; then
	init
elif [ ! -z "$csr" ]; then
	certs
fi

echo "removing artifacts..."
cd ..
rm -rf temp-work
echo "done."
echo "success!"
